// APITable <https://github.com/apitable/apitable>
// Copyright (C) 2022 APITable Ltd. <https://apitable.com>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

syntax='proto3';

package grpc.serving;

import "google/protobuf/any.proto";
import "common/Core.proto";

option java_multiple_files = true;
option java_package = "com.apitable.integration.grpc";
option java_outer_classname = "GrpcRoomServingService";

// room-server provided service
// socket->room
service RoomServingService {
  // user join datasheet room
  rpc WatchRoom (WatchRoomRo) returns (WatchRoomVo);
  // user leave datasheet room
  rpc LeaveRoom(LeaveRoomRo) returns (grpc.common.BasicResult);
  // User Modification datasheet
  rpc RoomChange(UserRoomChangeRo) returns (UserRoomChangeVo);
  // Get all active users in the current room
  rpc GetActiveCollaborators (WatchRoomRo) returns (GetActiveCollaboratorsVo);
  // Server sends room Change event
  rpc ServerRoomChange (grpc.common.ServerRoomChangeRo) returns (grpc.common.BasicResult);
  // copy datasheet effect ot
  rpc CopyNodeEffectOt (NodeCopyRo) returns (grpc.common.BasicResult);
  // delete datasheet effect ot
  rpc DeleteNodeEffectOt (NodeDeleteRo) returns (grpc.common.BasicResult);
}

message WatchRoomRo {
  string room_id = 1;
  string client_id = 2;
  string cookie = 3;
  repeated string socket_ids = 4;
  optional string share_id = 5;
  optional string space_id = 6;
  optional string embed_link_id = 7;
}

message WatchRoomVo {
  message ResourceRevision {
    string resourceId = 1;
    int32 revision = 2;
  }
  message ActiveCell {
    string field_id = 1;
    string record_id = 2;
    uint32 time = 3;
  }
  message Collaborator {
    string active_datasheet = 1;
    string socket_id = 2;
    optional string user_name = 3;
    optional string member_name = 4;
    optional string avatar = 5;
    optional string user_id = 6;
    optional string share_id = 7;
    optional uint32 create_time = 8;
    optional ActiveCell active_cell = 9;
    optional string nick_name = 10;
    optional int32 avatarColor = 11;
  }
  message Data {
    repeated ResourceRevision resource_revisions = 1;
    repeated Collaborator collaborators = 2;
    Collaborator collaborator = 3;
    optional string space_id = 4;
  }
  bool success = 1;
  int32 code = 2;
  string message = 3;
  Data data = 4;
}

message GetActiveCollaboratorsVo {
  message ActiveCell {
    string field_id = 1;
    string record_id = 2;
    uint32 time = 3;
  }
  message Collaborator {
    string active_datasheet = 1;
    string socket_id = 2;
    optional string user_name = 3;
    optional string member_name = 4;
    optional string avatar = 5;
    optional string user_id = 6;
    optional string share_id = 7;
    optional uint32 create_time = 8;
    optional ActiveCell active_cell = 9;
    optional string nick_name = 10;
    optional int32 avatarColor = 11;
  }
  message Data {
    repeated Collaborator collaborators = 1;
  }
  bool success = 1;
  int32 code = 2;
  string message = 3;
  Data data = 4;
}

message LeaveRoomRo {
  string client_id = 1;
}

message UserRoomChangeRo {
  string cookie = 1;
  string type = 2;
  string room_id = 3;
  google.protobuf.Any changesets = 4;
  optional string share_id = 5;
  string client_id = 6;
}

message UserRoomChangeVo {
  bool success = 1;
  int32 code = 2;
  string message = 3;
  google.protobuf.Any data = 4;
}

message NodeCopyRo {
  // Raw table ID
  string node_id = 1;
  // Copy table ID
  string copy_node_id = 2;
  // user ID
  string user_id = 3;
  // user uuid
  string uuid = 4;
  // Array of fieldIds that need to be converted
  repeated string field_ids = 5;
}

message NodeDeleteRo {
  // delete the array of nodes
  repeated string delete_node_id = 1;
  // The association table that needs to convert the field
  repeated string link_node_id = 2;
  // user ID
  string user_id = 3;
  // user uuid
  string uuid = 4;
}
