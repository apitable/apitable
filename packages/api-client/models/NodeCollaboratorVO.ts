/**
 * Api Document
 * Backend_Server Api Document
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { MemberTeamPathInfo } from '../models/MemberTeamPathInfo';
import { RoleVo } from '../models/RoleVo';
import { TagVo } from '../models/TagVo';
import { TeamVo } from '../models/TeamVo';
import { HttpFile } from '../http/http';

/**
* Node Collaborator View
*/
export class NodeCollaboratorVO {
    'memberId'?: number;
    /**
    * Head portrait address
    */
    'avatar'?: string;
    /**
    * User nickname
    */
    'nickName'?: string;
    /**
    * Member Name
    */
    'memberName'?: string;
    /**
    * Job No
    */
    'jobNumber'?: string;
    /**
    * Position
    */
    'position'?: string;
    /**
    * Phone number
    */
    'mobile'?: string;
    /**
    * Email
    */
    'email'?: string;
    /**
    * Department
    */
    'teams'?: Array<TeamVo>;
    /**
    * Label
    */
    'tags'?: Array<TagVo>;
    /**
    * role
    */
    'roles'?: Array<RoleVo>;
    /**
    * Administrator or not
    */
    'isAdmin'?: boolean;
    /**
    * Primary administrator or not
    */
    'isMainAdmin'?: boolean;
    /**
    * Whether activated
    */
    'isActive'?: boolean;
    /**
    * Creat time
    */
    'createTime'?: Date;
    /**
    * Update time
    */
    'updateTime'?: Date;
    /**
    * Creat time
    */
    'createdAt'?: Date;
    /**
    * Update time
    */
    'updatedAt'?: Date;
    /**
    * Whether the user has modified the nickname
    */
    'isNickNameModified'?: boolean;
    /**
    * Whether the member has modified the nickname
    */
    'isMemberNameModified'?: boolean;
    /**
    * team id and full hierarchy team path name
    */
    'teamData'?: Array<MemberTeamPathInfo>;
    /**
    * default avatar color number
    */
    'avatarColor'?: number;
    /**
    * Role
    */
    'role'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "memberId",
            "baseName": "memberId",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "avatar",
            "baseName": "avatar",
            "type": "string",
            "format": ""
        },
        {
            "name": "nickName",
            "baseName": "nickName",
            "type": "string",
            "format": ""
        },
        {
            "name": "memberName",
            "baseName": "memberName",
            "type": "string",
            "format": ""
        },
        {
            "name": "jobNumber",
            "baseName": "jobNumber",
            "type": "string",
            "format": ""
        },
        {
            "name": "position",
            "baseName": "position",
            "type": "string",
            "format": ""
        },
        {
            "name": "mobile",
            "baseName": "mobile",
            "type": "string",
            "format": ""
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string",
            "format": ""
        },
        {
            "name": "teams",
            "baseName": "teams",
            "type": "Array<TeamVo>",
            "format": ""
        },
        {
            "name": "tags",
            "baseName": "tags",
            "type": "Array<TagVo>",
            "format": ""
        },
        {
            "name": "roles",
            "baseName": "roles",
            "type": "Array<RoleVo>",
            "format": ""
        },
        {
            "name": "isAdmin",
            "baseName": "isAdmin",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isMainAdmin",
            "baseName": "isMainAdmin",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isActive",
            "baseName": "isActive",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "createTime",
            "baseName": "createTime",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "updateTime",
            "baseName": "updateTime",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "createdAt",
            "baseName": "createdAt",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "updatedAt",
            "baseName": "updatedAt",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "isNickNameModified",
            "baseName": "isNickNameModified",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isMemberNameModified",
            "baseName": "isMemberNameModified",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "teamData",
            "baseName": "teamData",
            "type": "Array<MemberTeamPathInfo>",
            "format": ""
        },
        {
            "name": "avatarColor",
            "baseName": "avatarColor",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "role",
            "baseName": "role",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return NodeCollaboratorVO.attributeTypeMap;
    }

    public constructor() {
    }
}

