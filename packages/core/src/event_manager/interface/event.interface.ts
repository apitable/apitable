/**
 * APITable <https://github.com/apitable/apitable>
 * Copyright (C) 2022 APITable Ltd. <https://apitable.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import { IJOTAction, IOperation } from 'engine/ot/interface';
import { ResourceType } from '../../types/resource_types';
import { EventAtomTypeEnums, EventRealTypeEnums, EventSourceTypeEnums, OPEventNameEnums } from '../const';

export type AnyObject = Record<string, any>;

export interface IEventBase {
  eventName: OPEventNameEnums;
  realType: EventRealTypeEnums;
  atomType: EventAtomTypeEnums;
  scope: ResourceType;
}

export interface IEventTestResult<T> {
  pass: boolean; // whether the event fires
  context: null | AnyObject & T; // custom context returned by the event
}

export interface IRealAtomEvent extends IEventBase {
  realType: EventRealTypeEnums.REAL;
  atomType: EventAtomTypeEnums.ATOM;
}

export interface IVirtualAtomEvent extends IEventBase {
  realType: EventRealTypeEnums.VIRTUAL;
  atomType: EventAtomTypeEnums.ATOM;
}

export interface IRealCombEvent extends IEventBase {
  realType: EventRealTypeEnums.REAL;
  atomType: EventAtomTypeEnums.COMB;
}

export interface IVirtualCombEvent extends IEventBase {
  realType: EventRealTypeEnums.VIRTUAL;
  atomType: EventAtomTypeEnums.COMB;
}

export type IAtomEvent = IRealAtomEvent | IVirtualAtomEvent;
export type ICombEvent = IRealCombEvent | IVirtualCombEvent;
export type IOPEvent = IAtomEvent | ICombEvent;

export type IEventInstance<T> = T & {
  context: AnyObject,
  sourceType: EventSourceTypeEnums;
};

// op context assembled by changeset
export interface IOPBaseContext {
  // ops generated by cmd
  op: IOperation;
  // single op action
  action: IJOTAction;
  // Resource Type
  resourceType: ResourceType;
  // resource id
  resourceId: string;
}
