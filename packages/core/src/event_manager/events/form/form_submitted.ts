/**
 * APITable <https://github.com/apitable/apitable>
 * Copyright (C) 2022 APITable Ltd. <https://apitable.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import { EventRealTypeEnums } from 'event_manager';
import { ResourceType } from '../../../types/resource_types';
import { IAtomEventType } from '../interface';
import { OPEventNameEnums } from './../../const';
import { AnyObject, IOPBaseContext } from './../../interface/event.interface';

interface IFormSubmitted {
  formId: string;
  datasheet: {
    id: string;
    name: string;
  };
  record: {
    id: string;
    url: string;
    fields: AnyObject;
  }
}

export class OPEventFormSubmitted extends IAtomEventType<IFormSubmitted> {
  eventName = OPEventNameEnums.FormSubmitted;
  realType = EventRealTypeEnums.REAL;
  scope = ResourceType.Form;

  // The event of the form form is not generated by the test op, but dispatches the event directly in the only entry function.
  test(_opContext: IOPBaseContext) {
    return {
      pass: false,
      context: null
    };
  }
}