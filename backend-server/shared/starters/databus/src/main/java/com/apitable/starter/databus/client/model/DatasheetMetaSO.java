/*
 * databus-server
 * databus-server APIs
 *
 * The version of the OpenAPI document: 1.8.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.apitable.starter.databus.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.apitable.starter.databus.client.model.FieldSO;
import com.apitable.starter.databus.client.model.ViewSO;
import com.apitable.starter.databus.client.model.WidgetPanelSO;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * DatasheetMetaSO
 */
@JsonPropertyOrder({
  DatasheetMetaSO.JSON_PROPERTY_FIELD_MAP,
  DatasheetMetaSO.JSON_PROPERTY_VIEWS,
  DatasheetMetaSO.JSON_PROPERTY_WIDGET_PANELS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class DatasheetMetaSO {
  public static final String JSON_PROPERTY_FIELD_MAP = "fieldMap";
  private Map<String, FieldSO> fieldMap = new HashMap<>();

  public static final String JSON_PROPERTY_VIEWS = "views";
  private List<ViewSO> views = new ArrayList<>();

  public static final String JSON_PROPERTY_WIDGET_PANELS = "widgetPanels";
  private List<WidgetPanelSO> widgetPanels;

  public DatasheetMetaSO() {
  }

  public DatasheetMetaSO fieldMap(Map<String, FieldSO> fieldMap) {
    
    this.fieldMap = fieldMap;
    return this;
  }

  public DatasheetMetaSO putFieldMapItem(String key, FieldSO fieldMapItem) {
    this.fieldMap.put(key, fieldMapItem);
    return this;
  }

   /**
   * Get fieldMap
   * @return fieldMap
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FIELD_MAP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Map<String, FieldSO> getFieldMap() {
    return fieldMap;
  }


  @JsonProperty(JSON_PROPERTY_FIELD_MAP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFieldMap(Map<String, FieldSO> fieldMap) {
    this.fieldMap = fieldMap;
  }


  public DatasheetMetaSO views(List<ViewSO> views) {
    
    this.views = views;
    return this;
  }

  public DatasheetMetaSO addViewsItem(ViewSO viewsItem) {
    if (this.views == null) {
      this.views = new ArrayList<>();
    }
    this.views.add(viewsItem);
    return this;
  }

   /**
   * Get views
   * @return views
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_VIEWS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<ViewSO> getViews() {
    return views;
  }


  @JsonProperty(JSON_PROPERTY_VIEWS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setViews(List<ViewSO> views) {
    this.views = views;
  }


  public DatasheetMetaSO widgetPanels(List<WidgetPanelSO> widgetPanels) {
    
    this.widgetPanels = widgetPanels;
    return this;
  }

  public DatasheetMetaSO addWidgetPanelsItem(WidgetPanelSO widgetPanelsItem) {
    if (this.widgetPanels == null) {
      this.widgetPanels = new ArrayList<>();
    }
    this.widgetPanels.add(widgetPanelsItem);
    return this;
  }

   /**
   * Get widgetPanels
   * @return widgetPanels
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WIDGET_PANELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<WidgetPanelSO> getWidgetPanels() {
    return widgetPanels;
  }


  @JsonProperty(JSON_PROPERTY_WIDGET_PANELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWidgetPanels(List<WidgetPanelSO> widgetPanels) {
    this.widgetPanels = widgetPanels;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatasheetMetaSO datasheetMetaSO = (DatasheetMetaSO) o;
    return Objects.equals(this.fieldMap, datasheetMetaSO.fieldMap) &&
        Objects.equals(this.views, datasheetMetaSO.views) &&
        Objects.equals(this.widgetPanels, datasheetMetaSO.widgetPanels);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fieldMap, views, widgetPanels);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatasheetMetaSO {\n");
    sb.append("    fieldMap: ").append(toIndentedString(fieldMap)).append("\n");
    sb.append("    views: ").append(toIndentedString(views)).append("\n");
    sb.append("    widgetPanels: ").append(toIndentedString(widgetPanels)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

