/*
 * databus-server
 * databus-server APIs
 *
 * The version of the OpenAPI document: 1.8.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.apitable.starter.databus.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * AiNode
 */
@JsonPropertyOrder({
  AiNode.JSON_PROPERTY_AI_ID,
  AiNode.JSON_PROPERTY_ID,
  AiNode.JSON_PROPERTY_NODE_ID,
  AiNode.JSON_PROPERTY_NODE_TYPE,
  AiNode.JSON_PROPERTY_SETTING,
  AiNode.JSON_PROPERTY_TYPE,
  AiNode.JSON_PROPERTY_VERSION
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AiNode {
  public static final String JSON_PROPERTY_AI_ID = "aiId";
  private String aiId;

  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public static final String JSON_PROPERTY_NODE_ID = "nodeId";
  private String nodeId;

  public static final String JSON_PROPERTY_NODE_TYPE = "nodeType";
  private Integer nodeType;

  public static final String JSON_PROPERTY_SETTING = "setting";
  private Object setting = null;

  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  public static final String JSON_PROPERTY_VERSION = "version";
  private Integer version;

  public AiNode() {
  }

  public AiNode aiId(String aiId) {
    
    this.aiId = aiId;
    return this;
  }

   /**
   * Get aiId
   * @return aiId
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AI_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getAiId() {
    return aiId;
  }


  @JsonProperty(JSON_PROPERTY_AI_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAiId(String aiId) {
    this.aiId = aiId;
  }


  public AiNode id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * minimum: 0
   * @return id
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(Long id) {
    this.id = id;
  }


  public AiNode nodeId(String nodeId) {
    
    this.nodeId = nodeId;
    return this;
  }

   /**
   * Get nodeId
   * @return nodeId
   * @deprecated
  **/
  @Deprecated
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NODE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNodeId() {
    return nodeId;
  }


  @JsonProperty(JSON_PROPERTY_NODE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }


  public AiNode nodeType(Integer nodeType) {
    
    this.nodeType = nodeType;
    return this;
  }

   /**
   * Get nodeType
   * @return nodeType
   * @deprecated
  **/
  @Deprecated
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NODE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getNodeType() {
    return nodeType;
  }


  @JsonProperty(JSON_PROPERTY_NODE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNodeType(Integer nodeType) {
    this.nodeType = nodeType;
  }


  public AiNode setting(Object setting) {
    
    this.setting = setting;
    return this;
  }

   /**
   * Get setting
   * @return setting
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SETTING)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getSetting() {
    return setting;
  }


  @JsonProperty(JSON_PROPERTY_SETTING)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSetting(Object setting) {
    this.setting = setting;
  }


  public AiNode type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(String type) {
    this.type = type;
  }


  public AiNode version(Integer version) {
    
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
   * @deprecated
  **/
  @Deprecated
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getVersion() {
    return version;
  }


  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVersion(Integer version) {
    this.version = version;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AiNode aiNode = (AiNode) o;
    return Objects.equals(this.aiId, aiNode.aiId) &&
        Objects.equals(this.id, aiNode.id) &&
        Objects.equals(this.nodeId, aiNode.nodeId) &&
        Objects.equals(this.nodeType, aiNode.nodeType) &&
        Objects.equals(this.setting, aiNode.setting) &&
        Objects.equals(this.type, aiNode.type) &&
        Objects.equals(this.version, aiNode.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aiId, id, nodeId, nodeType, setting, type, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AiNode {\n");
    sb.append("    aiId: ").append(toIndentedString(aiId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    nodeType: ").append(toIndentedString(nodeType)).append("\n");
    sb.append("    setting: ").append(toIndentedString(setting)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

