/*
 * databus-server
 * databus-server APIs
 *
 * The version of the OpenAPI document: 1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.apitable.starter.databus.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.apitable.starter.databus.client.model.BaseDatasheetPackSO;
import com.apitable.starter.databus.client.model.DatasheetSnapshotSO;
import com.apitable.starter.databus.client.model.NodeSO;
import com.apitable.starter.databus.client.model.UnitSO;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * DatasheetPackSO
 */
@JsonPropertyOrder({
  DatasheetPackSO.JSON_PROPERTY_DATASHEET,
  DatasheetPackSO.JSON_PROPERTY_FIELD_PERMISSION_MAP,
  DatasheetPackSO.JSON_PROPERTY_FOREIGN_DATASHEET_MAP,
  DatasheetPackSO.JSON_PROPERTY_SNAPSHOT,
  DatasheetPackSO.JSON_PROPERTY_UNITS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class DatasheetPackSO {
  public static final String JSON_PROPERTY_DATASHEET = "datasheet";
  private NodeSO datasheet;

  public static final String JSON_PROPERTY_FIELD_PERMISSION_MAP = "fieldPermissionMap";
  private JsonNullable<Object> fieldPermissionMap = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_FOREIGN_DATASHEET_MAP = "foreignDatasheetMap";
  private JsonNullable<Map<String, BaseDatasheetPackSO>> foreignDatasheetMap = JsonNullable.<Map<String, BaseDatasheetPackSO>>undefined();

  public static final String JSON_PROPERTY_SNAPSHOT = "snapshot";
  private DatasheetSnapshotSO snapshot;

  public static final String JSON_PROPERTY_UNITS = "units";
  private JsonNullable<List<UnitSO>> units = JsonNullable.<List<UnitSO>>undefined();

  public DatasheetPackSO() {
  }

  public DatasheetPackSO datasheet(NodeSO datasheet) {
    
    this.datasheet = datasheet;
    return this;
  }

   /**
   * Get datasheet
   * @return datasheet
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DATASHEET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public NodeSO getDatasheet() {
    return datasheet;
  }


  @JsonProperty(JSON_PROPERTY_DATASHEET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDatasheet(NodeSO datasheet) {
    this.datasheet = datasheet;
  }


  public DatasheetPackSO fieldPermissionMap(Object fieldPermissionMap) {
    this.fieldPermissionMap = JsonNullable.<Object>of(fieldPermissionMap);
    
    return this;
  }

   /**
   * Get fieldPermissionMap
   * @return fieldPermissionMap
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getFieldPermissionMap() {
        return fieldPermissionMap.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FIELD_PERMISSION_MAP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getFieldPermissionMap_JsonNullable() {
    return fieldPermissionMap;
  }
  
  @JsonProperty(JSON_PROPERTY_FIELD_PERMISSION_MAP)
  public void setFieldPermissionMap_JsonNullable(JsonNullable<Object> fieldPermissionMap) {
    this.fieldPermissionMap = fieldPermissionMap;
  }

  public void setFieldPermissionMap(Object fieldPermissionMap) {
    this.fieldPermissionMap = JsonNullable.<Object>of(fieldPermissionMap);
  }


  public DatasheetPackSO foreignDatasheetMap(Map<String, BaseDatasheetPackSO> foreignDatasheetMap) {
    this.foreignDatasheetMap = JsonNullable.<Map<String, BaseDatasheetPackSO>>of(foreignDatasheetMap);
    
    return this;
  }

  public DatasheetPackSO putForeignDatasheetMapItem(String key, BaseDatasheetPackSO foreignDatasheetMapItem) {
    if (this.foreignDatasheetMap == null || !this.foreignDatasheetMap.isPresent()) {
      this.foreignDatasheetMap = JsonNullable.<Map<String, BaseDatasheetPackSO>>of(new HashMap<>());
    }
    try {
      this.foreignDatasheetMap.get().put(key, foreignDatasheetMapItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Get foreignDatasheetMap
   * @return foreignDatasheetMap
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Map<String, BaseDatasheetPackSO> getForeignDatasheetMap() {
        return foreignDatasheetMap.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FOREIGN_DATASHEET_MAP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Map<String, BaseDatasheetPackSO>> getForeignDatasheetMap_JsonNullable() {
    return foreignDatasheetMap;
  }
  
  @JsonProperty(JSON_PROPERTY_FOREIGN_DATASHEET_MAP)
  public void setForeignDatasheetMap_JsonNullable(JsonNullable<Map<String, BaseDatasheetPackSO>> foreignDatasheetMap) {
    this.foreignDatasheetMap = foreignDatasheetMap;
  }

  public void setForeignDatasheetMap(Map<String, BaseDatasheetPackSO> foreignDatasheetMap) {
    this.foreignDatasheetMap = JsonNullable.<Map<String, BaseDatasheetPackSO>>of(foreignDatasheetMap);
  }


  public DatasheetPackSO snapshot(DatasheetSnapshotSO snapshot) {
    
    this.snapshot = snapshot;
    return this;
  }

   /**
   * Get snapshot
   * @return snapshot
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SNAPSHOT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public DatasheetSnapshotSO getSnapshot() {
    return snapshot;
  }


  @JsonProperty(JSON_PROPERTY_SNAPSHOT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSnapshot(DatasheetSnapshotSO snapshot) {
    this.snapshot = snapshot;
  }


  public DatasheetPackSO units(List<UnitSO> units) {
    this.units = JsonNullable.<List<UnitSO>>of(units);
    
    return this;
  }

  public DatasheetPackSO addUnitsItem(UnitSO unitsItem) {
    if (this.units == null || !this.units.isPresent()) {
      this.units = JsonNullable.<List<UnitSO>>of(new ArrayList<>());
    }
    try {
      this.units.get().add(unitsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Get units
   * @return units
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public List<UnitSO> getUnits() {
        return units.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_UNITS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<UnitSO>> getUnits_JsonNullable() {
    return units;
  }
  
  @JsonProperty(JSON_PROPERTY_UNITS)
  public void setUnits_JsonNullable(JsonNullable<List<UnitSO>> units) {
    this.units = units;
  }

  public void setUnits(List<UnitSO> units) {
    this.units = JsonNullable.<List<UnitSO>>of(units);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatasheetPackSO datasheetPackSO = (DatasheetPackSO) o;
    return Objects.equals(this.datasheet, datasheetPackSO.datasheet) &&
        equalsNullable(this.fieldPermissionMap, datasheetPackSO.fieldPermissionMap) &&
        equalsNullable(this.foreignDatasheetMap, datasheetPackSO.foreignDatasheetMap) &&
        Objects.equals(this.snapshot, datasheetPackSO.snapshot) &&
        equalsNullable(this.units, datasheetPackSO.units);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(datasheet, hashCodeNullable(fieldPermissionMap), hashCodeNullable(foreignDatasheetMap), snapshot, hashCodeNullable(units));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatasheetPackSO {\n");
    sb.append("    datasheet: ").append(toIndentedString(datasheet)).append("\n");
    sb.append("    fieldPermissionMap: ").append(toIndentedString(fieldPermissionMap)).append("\n");
    sb.append("    foreignDatasheetMap: ").append(toIndentedString(foreignDatasheetMap)).append("\n");
    sb.append("    snapshot: ").append(toIndentedString(snapshot)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

