/*
 * databus-server
 * databus-server APIs
 *
 * The version of the OpenAPI document: 1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.apitable.starter.databus.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.apitable.starter.databus.client.model.AlarmUser;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * RecordAlarm
 */
@JsonPropertyOrder({
  RecordAlarm.JSON_PROPERTY_ALARM_AT,
  RecordAlarm.JSON_PROPERTY_ALARM_USERS,
  RecordAlarm.JSON_PROPERTY_FIELD_ID,
  RecordAlarm.JSON_PROPERTY_ID,
  RecordAlarm.JSON_PROPERTY_RECORD_ID,
  RecordAlarm.JSON_PROPERTY_SUBTRACT,
  RecordAlarm.JSON_PROPERTY_TIME
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class RecordAlarm {
  public static final String JSON_PROPERTY_ALARM_AT = "alarmAt";
  private JsonNullable<Long> alarmAt = JsonNullable.<Long>undefined();

  public static final String JSON_PROPERTY_ALARM_USERS = "alarmUsers";
  private JsonNullable<List<AlarmUser>> alarmUsers = JsonNullable.<List<AlarmUser>>undefined();

  public static final String JSON_PROPERTY_FIELD_ID = "fieldId";
  private JsonNullable<String> fieldId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_ID = "id";
  private JsonNullable<String> id = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_RECORD_ID = "recordId";
  private JsonNullable<String> recordId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_SUBTRACT = "subtract";
  private JsonNullable<String> subtract = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_TIME = "time";
  private JsonNullable<String> time = JsonNullable.<String>undefined();

  public RecordAlarm() {
  }

  public RecordAlarm alarmAt(Long alarmAt) {
    this.alarmAt = JsonNullable.<Long>of(alarmAt);
    
    return this;
  }

   /**
   * Get alarmAt
   * minimum: 0
   * @return alarmAt
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Long getAlarmAt() {
        return alarmAt.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ALARM_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Long> getAlarmAt_JsonNullable() {
    return alarmAt;
  }
  
  @JsonProperty(JSON_PROPERTY_ALARM_AT)
  public void setAlarmAt_JsonNullable(JsonNullable<Long> alarmAt) {
    this.alarmAt = alarmAt;
  }

  public void setAlarmAt(Long alarmAt) {
    this.alarmAt = JsonNullable.<Long>of(alarmAt);
  }


  public RecordAlarm alarmUsers(List<AlarmUser> alarmUsers) {
    this.alarmUsers = JsonNullable.<List<AlarmUser>>of(alarmUsers);
    
    return this;
  }

  public RecordAlarm addAlarmUsersItem(AlarmUser alarmUsersItem) {
    if (this.alarmUsers == null || !this.alarmUsers.isPresent()) {
      this.alarmUsers = JsonNullable.<List<AlarmUser>>of(new ArrayList<>());
    }
    try {
      this.alarmUsers.get().add(alarmUsersItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Get alarmUsers
   * @return alarmUsers
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public List<AlarmUser> getAlarmUsers() {
        return alarmUsers.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ALARM_USERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<AlarmUser>> getAlarmUsers_JsonNullable() {
    return alarmUsers;
  }
  
  @JsonProperty(JSON_PROPERTY_ALARM_USERS)
  public void setAlarmUsers_JsonNullable(JsonNullable<List<AlarmUser>> alarmUsers) {
    this.alarmUsers = alarmUsers;
  }

  public void setAlarmUsers(List<AlarmUser> alarmUsers) {
    this.alarmUsers = JsonNullable.<List<AlarmUser>>of(alarmUsers);
  }


  public RecordAlarm fieldId(String fieldId) {
    this.fieldId = JsonNullable.<String>of(fieldId);
    
    return this;
  }

   /**
   * Get fieldId
   * @return fieldId
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public String getFieldId() {
        return fieldId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FIELD_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getFieldId_JsonNullable() {
    return fieldId;
  }
  
  @JsonProperty(JSON_PROPERTY_FIELD_ID)
  public void setFieldId_JsonNullable(JsonNullable<String> fieldId) {
    this.fieldId = fieldId;
  }

  public void setFieldId(String fieldId) {
    this.fieldId = JsonNullable.<String>of(fieldId);
  }


  public RecordAlarm id(String id) {
    this.id = JsonNullable.<String>of(id);
    
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public String getId() {
        return id.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getId_JsonNullable() {
    return id;
  }
  
  @JsonProperty(JSON_PROPERTY_ID)
  public void setId_JsonNullable(JsonNullable<String> id) {
    this.id = id;
  }

  public void setId(String id) {
    this.id = JsonNullable.<String>of(id);
  }


  public RecordAlarm recordId(String recordId) {
    this.recordId = JsonNullable.<String>of(recordId);
    
    return this;
  }

   /**
   * Get recordId
   * @return recordId
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public String getRecordId() {
        return recordId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_RECORD_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getRecordId_JsonNullable() {
    return recordId;
  }
  
  @JsonProperty(JSON_PROPERTY_RECORD_ID)
  public void setRecordId_JsonNullable(JsonNullable<String> recordId) {
    this.recordId = recordId;
  }

  public void setRecordId(String recordId) {
    this.recordId = JsonNullable.<String>of(recordId);
  }


  public RecordAlarm subtract(String subtract) {
    this.subtract = JsonNullable.<String>of(subtract);
    
    return this;
  }

   /**
   * Get subtract
   * @return subtract
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public String getSubtract() {
        return subtract.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SUBTRACT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getSubtract_JsonNullable() {
    return subtract;
  }
  
  @JsonProperty(JSON_PROPERTY_SUBTRACT)
  public void setSubtract_JsonNullable(JsonNullable<String> subtract) {
    this.subtract = subtract;
  }

  public void setSubtract(String subtract) {
    this.subtract = JsonNullable.<String>of(subtract);
  }


  public RecordAlarm time(String time) {
    this.time = JsonNullable.<String>of(time);
    
    return this;
  }

   /**
   * Get time
   * @return time
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public String getTime() {
        return time.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getTime_JsonNullable() {
    return time;
  }
  
  @JsonProperty(JSON_PROPERTY_TIME)
  public void setTime_JsonNullable(JsonNullable<String> time) {
    this.time = time;
  }

  public void setTime(String time) {
    this.time = JsonNullable.<String>of(time);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecordAlarm recordAlarm = (RecordAlarm) o;
    return equalsNullable(this.alarmAt, recordAlarm.alarmAt) &&
        equalsNullable(this.alarmUsers, recordAlarm.alarmUsers) &&
        equalsNullable(this.fieldId, recordAlarm.fieldId) &&
        equalsNullable(this.id, recordAlarm.id) &&
        equalsNullable(this.recordId, recordAlarm.recordId) &&
        equalsNullable(this.subtract, recordAlarm.subtract) &&
        equalsNullable(this.time, recordAlarm.time);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(alarmAt), hashCodeNullable(alarmUsers), hashCodeNullable(fieldId), hashCodeNullable(id), hashCodeNullable(recordId), hashCodeNullable(subtract), hashCodeNullable(time));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecordAlarm {\n");
    sb.append("    alarmAt: ").append(toIndentedString(alarmAt)).append("\n");
    sb.append("    alarmUsers: ").append(toIndentedString(alarmUsers)).append("\n");
    sb.append("    fieldId: ").append(toIndentedString(fieldId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    recordId: ").append(toIndentedString(recordId)).append("\n");
    sb.append("    subtract: ").append(toIndentedString(subtract)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

