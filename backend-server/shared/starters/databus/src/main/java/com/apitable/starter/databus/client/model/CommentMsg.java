/*
 * databus-server
 * databus-server APIs
 *
 * The version of the OpenAPI document: 1.8.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.apitable.starter.databus.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CommentMsg
 */
@JsonPropertyOrder({
  CommentMsg.JSON_PROPERTY_CONTENT,
  CommentMsg.JSON_PROPERTY_EMOJIS,
  CommentMsg.JSON_PROPERTY_HTML,
  CommentMsg.JSON_PROPERTY_REPLY,
  CommentMsg.JSON_PROPERTY_TYPE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CommentMsg {
  public static final String JSON_PROPERTY_CONTENT = "content";
  private String content;

  public static final String JSON_PROPERTY_EMOJIS = "emojis";
  private Map<String, List<String>> emojis;

  public static final String JSON_PROPERTY_HTML = "html";
  private String html;

  public static final String JSON_PROPERTY_REPLY = "reply";
  private String reply;

  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  public CommentMsg() {
  }

  public CommentMsg content(String content) {
    
    this.content = content;
    return this;
  }

   /**
   * Get content
   * @return content
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CONTENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getContent() {
    return content;
  }


  @JsonProperty(JSON_PROPERTY_CONTENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setContent(String content) {
    this.content = content;
  }


  public CommentMsg emojis(Map<String, List<String>> emojis) {
    
    this.emojis = emojis;
    return this;
  }

  public CommentMsg putEmojisItem(String key, List<String> emojisItem) {
    if (this.emojis == null) {
      this.emojis = new HashMap<>();
    }
    this.emojis.put(key, emojisItem);
    return this;
  }

   /**
   * Get emojis
   * @return emojis
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EMOJIS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, List<String>> getEmojis() {
    return emojis;
  }


  @JsonProperty(JSON_PROPERTY_EMOJIS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEmojis(Map<String, List<String>> emojis) {
    this.emojis = emojis;
  }


  public CommentMsg html(String html) {
    
    this.html = html;
    return this;
  }

   /**
   * Get html
   * @return html
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HTML)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getHtml() {
    return html;
  }


  @JsonProperty(JSON_PROPERTY_HTML)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHtml(String html) {
    this.html = html;
  }


  public CommentMsg reply(String reply) {
    
    this.reply = reply;
    return this;
  }

   /**
   * Get reply
   * @return reply
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REPLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getReply() {
    return reply;
  }


  @JsonProperty(JSON_PROPERTY_REPLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReply(String reply) {
    this.reply = reply;
  }


  public CommentMsg type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(String type) {
    this.type = type;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommentMsg commentMsg = (CommentMsg) o;
    return Objects.equals(this.content, commentMsg.content) &&
        Objects.equals(this.emojis, commentMsg.emojis) &&
        Objects.equals(this.html, commentMsg.html) &&
        Objects.equals(this.reply, commentMsg.reply) &&
        Objects.equals(this.type, commentMsg.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(content, emojis, html, reply, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommentMsg {\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    emojis: ").append(toIndentedString(emojis)).append("\n");
    sb.append("    html: ").append(toIndentedString(html)).append("\n");
    sb.append("    reply: ").append(toIndentedString(reply)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

