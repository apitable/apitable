/*
 * databus-server
 * databus-server APIs
 *
 * The version of the OpenAPI document: 1.8.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.apitable.starter.databus.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.apitable.starter.databus.client.model.FieldKeyEnum;
import com.apitable.starter.databus.client.model.FieldUpdateRO;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * RecordUpdateRO
 */
@JsonPropertyOrder({
  RecordUpdateRO.JSON_PROPERTY_FIELD_KEY,
  RecordUpdateRO.JSON_PROPERTY_RECORDS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class RecordUpdateRO {
  public static final String JSON_PROPERTY_FIELD_KEY = "fieldKey";
  private FieldKeyEnum fieldKey;

  public static final String JSON_PROPERTY_RECORDS = "records";
  private List<FieldUpdateRO> records = new ArrayList<>();

  public RecordUpdateRO() {
  }

  public RecordUpdateRO fieldKey(FieldKeyEnum fieldKey) {
    
    this.fieldKey = fieldKey;
    return this;
  }

   /**
   * Get fieldKey
   * @return fieldKey
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FIELD_KEY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public FieldKeyEnum getFieldKey() {
    return fieldKey;
  }


  @JsonProperty(JSON_PROPERTY_FIELD_KEY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFieldKey(FieldKeyEnum fieldKey) {
    this.fieldKey = fieldKey;
  }


  public RecordUpdateRO records(List<FieldUpdateRO> records) {
    
    this.records = records;
    return this;
  }

  public RecordUpdateRO addRecordsItem(FieldUpdateRO recordsItem) {
    if (this.records == null) {
      this.records = new ArrayList<>();
    }
    this.records.add(recordsItem);
    return this;
  }

   /**
   * Get records
   * @return records
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RECORDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<FieldUpdateRO> getRecords() {
    return records;
  }


  @JsonProperty(JSON_PROPERTY_RECORDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRecords(List<FieldUpdateRO> records) {
    this.records = records;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecordUpdateRO recordUpdateRO = (RecordUpdateRO) o;
    return Objects.equals(this.fieldKey, recordUpdateRO.fieldKey) &&
        Objects.equals(this.records, recordUpdateRO.records);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fieldKey, records);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecordUpdateRO {\n");
    sb.append("    fieldKey: ").append(toIndentedString(fieldKey)).append("\n");
    sb.append("    records: ").append(toIndentedString(records)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

