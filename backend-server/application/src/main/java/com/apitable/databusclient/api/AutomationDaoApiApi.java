/*
 * databus-server
 * databus-server APIs
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.apitable.databusclient.api;

import com.apitable.databusclient.ApiCallback;
import com.apitable.databusclient.ApiClient;
import com.apitable.databusclient.ApiException;
import com.apitable.databusclient.ApiResponse;
import com.apitable.databusclient.Configuration;
import com.apitable.databusclient.Pair;
import com.apitable.databusclient.ProgressRequestBody;
import com.apitable.databusclient.ProgressResponseBody;

import com.apitable.databusclient.model.*;
import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AutomationDaoApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AutomationDaoApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AutomationDaoApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for daoCopyAutomationRobot
     * @param automationRobotCopyRO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create automation robot successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call daoCopyAutomationRobotCall(List<AutomationRobotCopyRO> automationRobotCopyRO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = automationRobotCopyRO;

        // create path and map variables
        String localVarPath = "/databus/dao/automations/robots/copy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call daoCopyAutomationRobotValidateBeforeCall(List<AutomationRobotCopyRO> automationRobotCopyRO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'automationRobotCopyRO' is set
        if (automationRobotCopyRO == null) {
            throw new ApiException("Missing the required parameter 'automationRobotCopyRO' when calling daoCopyAutomationRobot(Async)");
        }

        return daoCopyAutomationRobotCall(automationRobotCopyRO, _callback);

    }

    /**
     * Create automation robot
     * Create automation robot
     * @param automationRobotCopyRO  (required)
     * @return ApiResponseEmptySO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create automation robot successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseEmptySO daoCopyAutomationRobot(List<AutomationRobotCopyRO> automationRobotCopyRO) throws ApiException {
        ApiResponse<ApiResponseEmptySO> localVarResp = daoCopyAutomationRobotWithHttpInfo(automationRobotCopyRO);
        return localVarResp.getData();
    }

    /**
     * Create automation robot
     * Create automation robot
     * @param automationRobotCopyRO  (required)
     * @return ApiResponse&lt;ApiResponseEmptySO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create automation robot successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseEmptySO> daoCopyAutomationRobotWithHttpInfo(List<AutomationRobotCopyRO> automationRobotCopyRO) throws ApiException {
        okhttp3.Call localVarCall = daoCopyAutomationRobotValidateBeforeCall(automationRobotCopyRO, null);
        Type localVarReturnType = new TypeToken<ApiResponseEmptySO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create automation robot (asynchronously)
     * Create automation robot
     * @param automationRobotCopyRO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create automation robot successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call daoCopyAutomationRobotAsync(List<AutomationRobotCopyRO> automationRobotCopyRO, final ApiCallback<ApiResponseEmptySO> _callback) throws ApiException {

        okhttp3.Call localVarCall = daoCopyAutomationRobotValidateBeforeCall(automationRobotCopyRO, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseEmptySO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for daoCreateAutomationRunHistory
     * @param robotId robot id (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create automation run history task success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call daoCreateAutomationRunHistoryCall(String robotId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/databus/dao/automations/{robot_id}/histories"
            .replace("{" + "robot_id" + "}", localVarApiClient.escapeString(robotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call daoCreateAutomationRunHistoryValidateBeforeCall(String robotId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'robotId' is set
        if (robotId == null) {
            throw new ApiException("Missing the required parameter 'robotId' when calling daoCreateAutomationRunHistory(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling daoCreateAutomationRunHistory(Async)");
        }

        return daoCreateAutomationRunHistoryCall(robotId, body, _callback);

    }

    /**
     * create automation run history task success todo
     * create automation run history task success todo
     * @param robotId robot id (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create automation run history task success </td><td>  -  </td></tr>
     </table>
     */
    public void daoCreateAutomationRunHistory(String robotId, Object body) throws ApiException {
        daoCreateAutomationRunHistoryWithHttpInfo(robotId, body);
    }

    /**
     * create automation run history task success todo
     * create automation run history task success todo
     * @param robotId robot id (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create automation run history task success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> daoCreateAutomationRunHistoryWithHttpInfo(String robotId, Object body) throws ApiException {
        okhttp3.Call localVarCall = daoCreateAutomationRunHistoryValidateBeforeCall(robotId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * create automation run history task success todo (asynchronously)
     * create automation run history task success todo
     * @param robotId robot id (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create automation run history task success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call daoCreateAutomationRunHistoryAsync(String robotId, Object body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = daoCreateAutomationRunHistoryValidateBeforeCall(robotId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for daoCreateOrUpdateAutomationRobotAction
     * @param robotId robot id (required)
     * @param automationRobotActionRO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update automation robot action successfully </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create automation robot action successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call daoCreateOrUpdateAutomationRobotActionCall(String robotId, AutomationRobotActionRO automationRobotActionRO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = automationRobotActionRO;

        // create path and map variables
        String localVarPath = "/databus/dao/automations/robots/{robot_id}/actions"
            .replace("{" + "robot_id" + "}", localVarApiClient.escapeString(robotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call daoCreateOrUpdateAutomationRobotActionValidateBeforeCall(String robotId, AutomationRobotActionRO automationRobotActionRO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'robotId' is set
        if (robotId == null) {
            throw new ApiException("Missing the required parameter 'robotId' when calling daoCreateOrUpdateAutomationRobotAction(Async)");
        }

        // verify the required parameter 'automationRobotActionRO' is set
        if (automationRobotActionRO == null) {
            throw new ApiException("Missing the required parameter 'automationRobotActionRO' when calling daoCreateOrUpdateAutomationRobotAction(Async)");
        }

        return daoCreateOrUpdateAutomationRobotActionCall(robotId, automationRobotActionRO, _callback);

    }

    /**
     * Add or create automation robot action
     * Add or create automation robot action
     * @param robotId robot id (required)
     * @param automationRobotActionRO  (required)
     * @return ApiResponseAutomationActionPO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update automation robot action successfully </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create automation robot action successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseAutomationActionPO daoCreateOrUpdateAutomationRobotAction(String robotId, AutomationRobotActionRO automationRobotActionRO) throws ApiException {
        ApiResponse<ApiResponseAutomationActionPO> localVarResp = daoCreateOrUpdateAutomationRobotActionWithHttpInfo(robotId, automationRobotActionRO);
        return localVarResp.getData();
    }

    /**
     * Add or create automation robot action
     * Add or create automation robot action
     * @param robotId robot id (required)
     * @param automationRobotActionRO  (required)
     * @return ApiResponse&lt;ApiResponseAutomationActionPO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update automation robot action successfully </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create automation robot action successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseAutomationActionPO> daoCreateOrUpdateAutomationRobotActionWithHttpInfo(String robotId, AutomationRobotActionRO automationRobotActionRO) throws ApiException {
        okhttp3.Call localVarCall = daoCreateOrUpdateAutomationRobotActionValidateBeforeCall(robotId, automationRobotActionRO, null);
        Type localVarReturnType = new TypeToken<ApiResponseAutomationActionPO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add or create automation robot action (asynchronously)
     * Add or create automation robot action
     * @param robotId robot id (required)
     * @param automationRobotActionRO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update automation robot action successfully </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create automation robot action successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call daoCreateOrUpdateAutomationRobotActionAsync(String robotId, AutomationRobotActionRO automationRobotActionRO, final ApiCallback<ApiResponseAutomationActionPO> _callback) throws ApiException {

        okhttp3.Call localVarCall = daoCreateOrUpdateAutomationRobotActionValidateBeforeCall(robotId, automationRobotActionRO, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseAutomationActionPO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for daoCreateOrUpdateAutomationRobotTrigger
     * @param robotId robot id (required)
     * @param automationRobotTriggerRO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update automation robot trigger successfully </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create automation robot trigger successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call daoCreateOrUpdateAutomationRobotTriggerCall(String robotId, AutomationRobotTriggerRO automationRobotTriggerRO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = automationRobotTriggerRO;

        // create path and map variables
        String localVarPath = "/databus/dao/automations/robots/{robot_id}/triggers"
            .replace("{" + "robot_id" + "}", localVarApiClient.escapeString(robotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call daoCreateOrUpdateAutomationRobotTriggerValidateBeforeCall(String robotId, AutomationRobotTriggerRO automationRobotTriggerRO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'robotId' is set
        if (robotId == null) {
            throw new ApiException("Missing the required parameter 'robotId' when calling daoCreateOrUpdateAutomationRobotTrigger(Async)");
        }

        // verify the required parameter 'automationRobotTriggerRO' is set
        if (automationRobotTriggerRO == null) {
            throw new ApiException("Missing the required parameter 'automationRobotTriggerRO' when calling daoCreateOrUpdateAutomationRobotTrigger(Async)");
        }

        return daoCreateOrUpdateAutomationRobotTriggerCall(robotId, automationRobotTriggerRO, _callback);

    }

    /**
     * Add or create automation robot trigger
     * Add or create automation robot trigger
     * @param robotId robot id (required)
     * @param automationRobotTriggerRO  (required)
     * @return ApiResponseAutomationTriggerPO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update automation robot trigger successfully </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create automation robot trigger successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseAutomationTriggerPO daoCreateOrUpdateAutomationRobotTrigger(String robotId, AutomationRobotTriggerRO automationRobotTriggerRO) throws ApiException {
        ApiResponse<ApiResponseAutomationTriggerPO> localVarResp = daoCreateOrUpdateAutomationRobotTriggerWithHttpInfo(robotId, automationRobotTriggerRO);
        return localVarResp.getData();
    }

    /**
     * Add or create automation robot trigger
     * Add or create automation robot trigger
     * @param robotId robot id (required)
     * @param automationRobotTriggerRO  (required)
     * @return ApiResponse&lt;ApiResponseAutomationTriggerPO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update automation robot trigger successfully </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create automation robot trigger successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseAutomationTriggerPO> daoCreateOrUpdateAutomationRobotTriggerWithHttpInfo(String robotId, AutomationRobotTriggerRO automationRobotTriggerRO) throws ApiException {
        okhttp3.Call localVarCall = daoCreateOrUpdateAutomationRobotTriggerValidateBeforeCall(robotId, automationRobotTriggerRO, null);
        Type localVarReturnType = new TypeToken<ApiResponseAutomationTriggerPO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add or create automation robot trigger (asynchronously)
     * Add or create automation robot trigger
     * @param robotId robot id (required)
     * @param automationRobotTriggerRO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update automation robot trigger successfully </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create automation robot trigger successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call daoCreateOrUpdateAutomationRobotTriggerAsync(String robotId, AutomationRobotTriggerRO automationRobotTriggerRO, final ApiCallback<ApiResponseAutomationTriggerPO> _callback) throws ApiException {

        okhttp3.Call localVarCall = daoCreateOrUpdateAutomationRobotTriggerValidateBeforeCall(robotId, automationRobotTriggerRO, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseAutomationTriggerPO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for daoGetAutomationRunContext
     * @param taskId task id (required)
     * @param actionId action id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get automation run history task context </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call daoGetAutomationRunContextCall(String taskId, String actionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/databus/dao/automations/histories/{task_id}/contexts/{action_id}"
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()))
            .replace("{" + "action_id" + "}", localVarApiClient.escapeString(actionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call daoGetAutomationRunContextValidateBeforeCall(String taskId, String actionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling daoGetAutomationRunContext(Async)");
        }

        // verify the required parameter 'actionId' is set
        if (actionId == null) {
            throw new ApiException("Missing the required parameter 'actionId' when calling daoGetAutomationRunContext(Async)");
        }

        return daoGetAutomationRunContextCall(taskId, actionId, _callback);

    }

    /**
     * Get automation task input and output todo
     * Get automation task input and output todo
     * @param taskId task id (required)
     * @param actionId action id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get automation run history task context </td><td>  -  </td></tr>
     </table>
     */
    public void daoGetAutomationRunContext(String taskId, String actionId) throws ApiException {
        daoGetAutomationRunContextWithHttpInfo(taskId, actionId);
    }

    /**
     * Get automation task input and output todo
     * Get automation task input and output todo
     * @param taskId task id (required)
     * @param actionId action id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get automation run history task context </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> daoGetAutomationRunContextWithHttpInfo(String taskId, String actionId) throws ApiException {
        okhttp3.Call localVarCall = daoGetAutomationRunContextValidateBeforeCall(taskId, actionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get automation task input and output todo (asynchronously)
     * Get automation task input and output todo
     * @param taskId task id (required)
     * @param actionId action id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get automation run history task context </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call daoGetAutomationRunContextAsync(String taskId, String actionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = daoGetAutomationRunContextValidateBeforeCall(taskId, actionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for daoGetAutomationRunHistory
     * @param pageSize  (required)
     * @param pageNum  (required)
     * @param robotId robot id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get automation run history list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call daoGetAutomationRunHistoryCall(Integer pageSize, Integer pageNum, String robotId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/databus/dao/automations/{robot_id}/histories"
            .replace("{" + "robot_id" + "}", localVarApiClient.escapeString(robotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (pageNum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_num", pageNum));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call daoGetAutomationRunHistoryValidateBeforeCall(Integer pageSize, Integer pageNum, String robotId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling daoGetAutomationRunHistory(Async)");
        }

        // verify the required parameter 'pageNum' is set
        if (pageNum == null) {
            throw new ApiException("Missing the required parameter 'pageNum' when calling daoGetAutomationRunHistory(Async)");
        }

        // verify the required parameter 'robotId' is set
        if (robotId == null) {
            throw new ApiException("Missing the required parameter 'robotId' when calling daoGetAutomationRunHistory(Async)");
        }

        return daoGetAutomationRunHistoryCall(pageSize, pageNum, robotId, _callback);

    }

    /**
     * Get automation run history list
     * Get automation run history list
     * @param pageSize  (required)
     * @param pageNum  (required)
     * @param robotId robot id (required)
     * @return ApiResponseAutomationRunHistoryPO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get automation run history list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseAutomationRunHistoryPO daoGetAutomationRunHistory(Integer pageSize, Integer pageNum, String robotId) throws ApiException {
        ApiResponse<ApiResponseAutomationRunHistoryPO> localVarResp = daoGetAutomationRunHistoryWithHttpInfo(pageSize, pageNum, robotId);
        return localVarResp.getData();
    }

    /**
     * Get automation run history list
     * Get automation run history list
     * @param pageSize  (required)
     * @param pageNum  (required)
     * @param robotId robot id (required)
     * @return ApiResponse&lt;ApiResponseAutomationRunHistoryPO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get automation run history list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseAutomationRunHistoryPO> daoGetAutomationRunHistoryWithHttpInfo(Integer pageSize, Integer pageNum, String robotId) throws ApiException {
        okhttp3.Call localVarCall = daoGetAutomationRunHistoryValidateBeforeCall(pageSize, pageNum, robotId, null);
        Type localVarReturnType = new TypeToken<ApiResponseAutomationRunHistoryPO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get automation run history list (asynchronously)
     * Get automation run history list
     * @param pageSize  (required)
     * @param pageNum  (required)
     * @param robotId robot id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get automation run history list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call daoGetAutomationRunHistoryAsync(Integer pageSize, Integer pageNum, String robotId, final ApiCallback<ApiResponseAutomationRunHistoryPO> _callback) throws ApiException {

        okhttp3.Call localVarCall = daoGetAutomationRunHistoryValidateBeforeCall(pageSize, pageNum, robotId, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseAutomationRunHistoryPO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for daoGetAutomationRunHistoryDetail
     * @param taskId task id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get automation run history detail </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call daoGetAutomationRunHistoryDetailCall(String taskId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/databus/dao/automations/histories/{task_id}"
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call daoGetAutomationRunHistoryDetailValidateBeforeCall(String taskId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling daoGetAutomationRunHistoryDetail(Async)");
        }

        return daoGetAutomationRunHistoryDetailCall(taskId, _callback);

    }

    /**
     * Get automation run task details todo
     * Get automation run task details todo
     * @param taskId task id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get automation run history detail </td><td>  -  </td></tr>
     </table>
     */
    public void daoGetAutomationRunHistoryDetail(String taskId) throws ApiException {
        daoGetAutomationRunHistoryDetailWithHttpInfo(taskId);
    }

    /**
     * Get automation run task details todo
     * Get automation run task details todo
     * @param taskId task id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get automation run history detail </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> daoGetAutomationRunHistoryDetailWithHttpInfo(String taskId) throws ApiException {
        okhttp3.Call localVarCall = daoGetAutomationRunHistoryDetailValidateBeforeCall(taskId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get automation run task details todo (asynchronously)
     * Get automation run task details todo
     * @param taskId task id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get automation run history detail </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call daoGetAutomationRunHistoryDetailAsync(String taskId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = daoGetAutomationRunHistoryDetailValidateBeforeCall(taskId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for daoGetRobotByRobotId
     * @param robotId Automation robot id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get automation detail </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call daoGetRobotByRobotIdCall(String robotId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/databus/dao/automations/robots/{robot_id}"
            .replace("{" + "robot_id" + "}", localVarApiClient.escapeString(robotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call daoGetRobotByRobotIdValidateBeforeCall(String robotId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'robotId' is set
        if (robotId == null) {
            throw new ApiException("Missing the required parameter 'robotId' when calling daoGetRobotByRobotId(Async)");
        }

        return daoGetRobotByRobotIdCall(robotId, _callback);

    }

    /**
     * Get automation robot detail.
     * Get automation robot detail.
     * @param robotId Automation robot id (required)
     * @return ApiResponseAutomationSO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get automation detail </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseAutomationSO daoGetRobotByRobotId(String robotId) throws ApiException {
        ApiResponse<ApiResponseAutomationSO> localVarResp = daoGetRobotByRobotIdWithHttpInfo(robotId);
        return localVarResp.getData();
    }

    /**
     * Get automation robot detail.
     * Get automation robot detail.
     * @param robotId Automation robot id (required)
     * @return ApiResponse&lt;ApiResponseAutomationSO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get automation detail </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseAutomationSO> daoGetRobotByRobotIdWithHttpInfo(String robotId) throws ApiException {
        okhttp3.Call localVarCall = daoGetRobotByRobotIdValidateBeforeCall(robotId, null);
        Type localVarReturnType = new TypeToken<ApiResponseAutomationSO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get automation robot detail. (asynchronously)
     * Get automation robot detail.
     * @param robotId Automation robot id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get automation detail </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call daoGetRobotByRobotIdAsync(String robotId, final ApiCallback<ApiResponseAutomationSO> _callback) throws ApiException {

        okhttp3.Call localVarCall = daoGetRobotByRobotIdValidateBeforeCall(robotId, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseAutomationSO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for daoGetRobotsByResourceId
     * @param resourceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get automations triggers </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call daoGetRobotsByResourceIdCall(String resourceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/databus/dao/automations/robots";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resourceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resource_id", resourceId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call daoGetRobotsByResourceIdValidateBeforeCall(String resourceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling daoGetRobotsByResourceId(Async)");
        }

        return daoGetRobotsByResourceIdCall(resourceId, _callback);

    }

    /**
     * get automations triggers todo
     * get automations triggers todo
     * @param resourceId  (required)
     * @return ApiResponseAutomationRobotIntroductionSO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get automations triggers </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseAutomationRobotIntroductionSO daoGetRobotsByResourceId(String resourceId) throws ApiException {
        ApiResponse<ApiResponseAutomationRobotIntroductionSO> localVarResp = daoGetRobotsByResourceIdWithHttpInfo(resourceId);
        return localVarResp.getData();
    }

    /**
     * get automations triggers todo
     * get automations triggers todo
     * @param resourceId  (required)
     * @return ApiResponse&lt;ApiResponseAutomationRobotIntroductionSO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get automations triggers </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseAutomationRobotIntroductionSO> daoGetRobotsByResourceIdWithHttpInfo(String resourceId) throws ApiException {
        okhttp3.Call localVarCall = daoGetRobotsByResourceIdValidateBeforeCall(resourceId, null);
        Type localVarReturnType = new TypeToken<ApiResponseAutomationRobotIntroductionSO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get automations triggers todo (asynchronously)
     * get automations triggers todo
     * @param resourceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get automations triggers </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call daoGetRobotsByResourceIdAsync(String resourceId, final ApiCallback<ApiResponseAutomationRobotIntroductionSO> _callback) throws ApiException {

        okhttp3.Call localVarCall = daoGetRobotsByResourceIdValidateBeforeCall(resourceId, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseAutomationRobotIntroductionSO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for daoGetRobotsTriggers
     * @param robotIds  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get automations triggers </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call daoGetRobotsTriggersCall(List<String> robotIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/databus/dao/automations/triggers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (robotIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "robot_ids", robotIds));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call daoGetRobotsTriggersValidateBeforeCall(List<String> robotIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'robotIds' is set
        if (robotIds == null) {
            throw new ApiException("Missing the required parameter 'robotIds' when calling daoGetRobotsTriggers(Async)");
        }

        return daoGetRobotsTriggersCall(robotIds, _callback);

    }

    /**
     * get automations triggers todo
     * get automations triggers todo
     * @param robotIds  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get automations triggers </td><td>  -  </td></tr>
     </table>
     */
    public void daoGetRobotsTriggers(List<String> robotIds) throws ApiException {
        daoGetRobotsTriggersWithHttpInfo(robotIds);
    }

    /**
     * get automations triggers todo
     * get automations triggers todo
     * @param robotIds  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get automations triggers </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> daoGetRobotsTriggersWithHttpInfo(List<String> robotIds) throws ApiException {
        okhttp3.Call localVarCall = daoGetRobotsTriggersValidateBeforeCall(robotIds, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * get automations triggers todo (asynchronously)
     * get automations triggers todo
     * @param robotIds  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get automations triggers </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call daoGetRobotsTriggersAsync(List<String> robotIds, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = daoGetRobotsTriggersValidateBeforeCall(robotIds, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for daoUpdateAutomationRobot
     * @param robotId robot id (required)
     * @param automationRobotUpdateRO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update automation robot successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call daoUpdateAutomationRobotCall(String robotId, AutomationRobotUpdateRO automationRobotUpdateRO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = automationRobotUpdateRO;

        // create path and map variables
        String localVarPath = "/databus/dao/automations/robots/{robot_id}"
            .replace("{" + "robot_id" + "}", localVarApiClient.escapeString(robotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call daoUpdateAutomationRobotValidateBeforeCall(String robotId, AutomationRobotUpdateRO automationRobotUpdateRO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'robotId' is set
        if (robotId == null) {
            throw new ApiException("Missing the required parameter 'robotId' when calling daoUpdateAutomationRobot(Async)");
        }

        // verify the required parameter 'automationRobotUpdateRO' is set
        if (automationRobotUpdateRO == null) {
            throw new ApiException("Missing the required parameter 'automationRobotUpdateRO' when calling daoUpdateAutomationRobot(Async)");
        }

        return daoUpdateAutomationRobotCall(robotId, automationRobotUpdateRO, _callback);

    }

    /**
     * Update automation robot
     * Update automation robot
     * @param robotId robot id (required)
     * @param automationRobotUpdateRO  (required)
     * @return ApiResponseEmptySO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update automation robot successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseEmptySO daoUpdateAutomationRobot(String robotId, AutomationRobotUpdateRO automationRobotUpdateRO) throws ApiException {
        ApiResponse<ApiResponseEmptySO> localVarResp = daoUpdateAutomationRobotWithHttpInfo(robotId, automationRobotUpdateRO);
        return localVarResp.getData();
    }

    /**
     * Update automation robot
     * Update automation robot
     * @param robotId robot id (required)
     * @param automationRobotUpdateRO  (required)
     * @return ApiResponse&lt;ApiResponseEmptySO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update automation robot successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseEmptySO> daoUpdateAutomationRobotWithHttpInfo(String robotId, AutomationRobotUpdateRO automationRobotUpdateRO) throws ApiException {
        okhttp3.Call localVarCall = daoUpdateAutomationRobotValidateBeforeCall(robotId, automationRobotUpdateRO, null);
        Type localVarReturnType = new TypeToken<ApiResponseEmptySO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update automation robot (asynchronously)
     * Update automation robot
     * @param robotId robot id (required)
     * @param automationRobotUpdateRO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update automation robot successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call daoUpdateAutomationRobotAsync(String robotId, AutomationRobotUpdateRO automationRobotUpdateRO, final ApiCallback<ApiResponseEmptySO> _callback) throws ApiException {

        okhttp3.Call localVarCall = daoUpdateAutomationRobotValidateBeforeCall(robotId, automationRobotUpdateRO, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseEmptySO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for daoUpdateAutomationRunHistoryStatus
     * @param taskId task id (required)
     * @param automationHistoryStatusRO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get automation run history task context </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call daoUpdateAutomationRunHistoryStatusCall(String taskId, AutomationHistoryStatusRO automationHistoryStatusRO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = automationHistoryStatusRO;

        // create path and map variables
        String localVarPath = "/databus/dao/automations/histories/{task_id}/status"
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call daoUpdateAutomationRunHistoryStatusValidateBeforeCall(String taskId, AutomationHistoryStatusRO automationHistoryStatusRO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling daoUpdateAutomationRunHistoryStatus(Async)");
        }

        // verify the required parameter 'automationHistoryStatusRO' is set
        if (automationHistoryStatusRO == null) {
            throw new ApiException("Missing the required parameter 'automationHistoryStatusRO' when calling daoUpdateAutomationRunHistoryStatus(Async)");
        }

        return daoUpdateAutomationRunHistoryStatusCall(taskId, automationHistoryStatusRO, _callback);

    }

    /**
     * Get automation task input and output todo
     * Get automation task input and output todo
     * @param taskId task id (required)
     * @param automationHistoryStatusRO  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get automation run history task context </td><td>  -  </td></tr>
     </table>
     */
    public void daoUpdateAutomationRunHistoryStatus(String taskId, AutomationHistoryStatusRO automationHistoryStatusRO) throws ApiException {
        daoUpdateAutomationRunHistoryStatusWithHttpInfo(taskId, automationHistoryStatusRO);
    }

    /**
     * Get automation task input and output todo
     * Get automation task input and output todo
     * @param taskId task id (required)
     * @param automationHistoryStatusRO  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get automation run history task context </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> daoUpdateAutomationRunHistoryStatusWithHttpInfo(String taskId, AutomationHistoryStatusRO automationHistoryStatusRO) throws ApiException {
        okhttp3.Call localVarCall = daoUpdateAutomationRunHistoryStatusValidateBeforeCall(taskId, automationHistoryStatusRO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get automation task input and output todo (asynchronously)
     * Get automation task input and output todo
     * @param taskId task id (required)
     * @param automationHistoryStatusRO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get automation run history task context </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call daoUpdateAutomationRunHistoryStatusAsync(String taskId, AutomationHistoryStatusRO automationHistoryStatusRO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = daoUpdateAutomationRunHistoryStatusValidateBeforeCall(taskId, automationHistoryStatusRO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    /**
     * Build call for daoGetRobotRunsBySpaceId
     * @param spaceId  space id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> get automation robot running times </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call daoGetRobotRunsBySpaceIdCall(String spaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/databus/dao/automations/robots/runs/{space_id}"
                .replace("{" + "space_id" + "}", localVarApiClient.escapeString(spaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call daoGetRobotRunsBySpaceIdValidateBeforeCall(String spaceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling daoGetRobotRunsBySpaceId(Async)");
        }

        return daoGetRobotRunsBySpaceIdCall(spaceId, _callback);

    }

    /**
     * Get automation robot running times.
     * Get automation robot running times.
     * @param spaceId  space id (required)
     * @return ApiResponseAutomationRobotRunNumsSO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> get automation robot running times </td><td>  -  </td></tr>
    </table>
     */
    public ApiResponseAutomationRobotRunNumsSO daoGetRobotRunsBySpaceId(String spaceId) throws ApiException {
        ApiResponse<ApiResponseAutomationRobotRunNumsSO> localVarResp = daoGetRobotRunsBySpaceIdWithHttpInfo(spaceId);
        return localVarResp.getData();
    }

    /**
     * Get automation robot running times.
     * Get automation robot running times.
     * @param spaceId  space id (required)
     * @return ApiResponse&lt;ApiResponseAutomationRobotRunNumsSO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> get automation robot running times </td><td>  -  </td></tr>
    </table>
     */
    public ApiResponse<ApiResponseAutomationRobotRunNumsSO> daoGetRobotRunsBySpaceIdWithHttpInfo(String spaceId) throws ApiException {
        okhttp3.Call localVarCall = daoGetRobotRunsBySpaceIdValidateBeforeCall(spaceId, null);
        Type localVarReturnType = new TypeToken<ApiResponseAutomationRobotRunNumsSO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get automation robot running times. (asynchronously)
     * Get automation robot running times.
     * @param spaceId  space id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 200 </td><td> get automation robot running times </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call daoGetRobotRunsBySpaceIdAsync(String spaceId, final ApiCallback<ApiResponseAutomationRobotRunNumsSO> _callback) throws ApiException {

        okhttp3.Call localVarCall = daoGetRobotRunsBySpaceIdValidateBeforeCall(spaceId, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseAutomationRobotRunNumsSO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
